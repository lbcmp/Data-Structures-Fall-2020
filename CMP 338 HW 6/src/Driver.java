import java.util.Vector;

public class Driver implements DriverInterface {
	
	public Vector<TreeItem<Integer,String>> getVectorOfTreeItems() {
		/**
		 * This method is used to obtain a Vector<TreeItem<Integer,String>> with 
		 * 131,071 TreeItem objects.
		 * 
		 * The TreeItem objects created by this method will be TreeItem<Integer,String>,
		 * where:
		 * 
		 * The key is an Integer object representing a randomly generated int in the range 0 - 1,000,000
		 * The value is a String object generated by concatenating "String " and the key
		 * 
		 * @return	Returns a Vector<TreeItem<Integer,String>> containing 
		 * 131,071 TreeItem objects.
		 */
		int numTreeItems = 131071;
		
		Vector<TreeItem<Integer,String>> treeItems = new Vector<TreeItem<Integer,String>>(numTreeItems);
		
		for (int i = 0; i < numTreeItems; ++i) {
			int key = (int) (Math.random() * 1000001);
			String value = "String " + key;
			TreeItem<Integer,String> treeItem = new TreeItem<Integer,String>(key, value);
			treeItems.add(treeItem);
		}
		
		return treeItems;
	}
	
	public BinarySearchTree<Integer,String> createAndPopulateBST(Vector<TreeItem<Integer, String>> treeItems) {
		/**
		 * This method will create a new BinarySearchTree<Integer,String> and fully populate it with all the
		 * contents of the specified Vector treeItems
		 * 
		 * @param treeItems	A Vector of TreeItem<Integer,String> objects to be inserted into the BinarySearchTree
		 * 
		 * @return	A reference to BinarySearchTree that was created and fully populated.
		 */
		
		BinarySearchTree<Integer,String> bst = new BinarySearchTree<Integer,String>();
		int numTreeItems = treeItems.size();
		for (int i = 0; i < numTreeItems; ++i) {
			bst.insert(treeItems.elementAt(i));
		}
		
		return bst;
	}
}
